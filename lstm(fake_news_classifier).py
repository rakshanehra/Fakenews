# -*- coding: utf-8 -*-
"""LSTM(FAKE news classifier).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dKTBVAQCbXKyfot3MoXWzicV-gx38wRf
"""

import pandas as pd

df=pd.read_csv('/content/drive/MyDrive/Data/train (3).csv')

df.head(2)

"""fake news classifier"""

df.shape

df=df.dropna()

x=df.iloc[:,:-1]

y=df['label']

x.shape

import tensorflow as tf

tf.__version__

from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.text import one_hot

from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense

voc_size=5000

messages=x.copy()

messages["title"][1]

messages.head()

messages.reset_index(inplace=True)

import nltk
import re
from nltk.corpus import stopwords

nltk.download("stopwords")

from nltk.stem.porter import PorterStemmer
#reduceing words to their root stem
ps=PorterStemmer()

corpus=[]
for i in range(0,len(messages)):
  review=re.sub('[^a-zA-Z]',' ',messages['title'][i])
  review=review.lower()
  review=review.split()
  review=[ps.stem(word) for word in review if not word in stopwords.words('english')]
  review=' '.join(review)
  corpus.append(review)

corpus[1]

onehot_repr=[one_hot(words,voc_size) for words in corpus]

corpus[1]

onehot_repr[1]

#Embedding representation
sent_length=20
embedded_docs=pad_sequences(onehot_repr,padding='post',maxlen=sent_length)

print(embedded_docs)

#create model
embedding_vector_feature=40
model=Sequential()
model.add(Embedding(voc_size,embedding_vector_feature,input_length=sent_length))
model.add(LSTM(100))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
print(model.summary())

import numpy as np

xfinale=np.array(embedded_docs)
yfinale=np.array(y)

xfinale.shape,yfinale.shape

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(xfinale,yfinale,test_size=0.20,random_state=42)

xtrain

model.fit(xtrain,ytrain,validation_data=(xtest,ytest),epochs=10,batch_size=64)

ypred=model.predict(xtest)

ypred=np.where(ypred>0.6,1,0)

from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
import pandas as pd

pd.DataFrame(confusion_matrix(ytest,ypred))

accuracy_score(ytest,ypred)

print(classification_report(ytest,ypred))